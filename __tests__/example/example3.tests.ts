import { hex } from 'buffer-tag';
import fs from 'fs';

import { DeviceResponseVerifier } from '../../src/index';

export const ISSUER_CERTIFICATE = fs.readFileSync(
  `${__dirname}/issuer.pem`,
  'utf-8',
);

describe('example 3: device response with partial and tampered disclosure', () => {
  const ephemeralReaderKey = hex`534b526561646572`;
  const encodedSessionTranscript = hex`d818589e83f6f68466313233343536782b437131616e506238765a55356a354330643768637362754a4c4270496177554a4944515269324562776234785c687474703a2f2f6c6f63616c686f73743a343030302f6170692f70726573656e746174696f6e5f726571756573742f64633839393964662d643665612d346338342d393938352d3337613862383161383265632f63616c6c6261636b6761626364656667`;
  const deviceResponse = hex`b900036776657273696f6e63312e3069646f63756d656e747381b9000367646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c6973737565725369676e6564b900026a6e616d65537061636573b90001716f72672e69736f2e31383031332e352e3186d8185868a4686469676573744944006672616e646f6d5820421b9ad8af09538d494d739771b84364490887f2a5c48a3f5119fa31c276f3bb71656c656d656e744964656e7469666965726b66616d696c795f6e616d656c656c656d656e7456616c75656857696c6c69616d73d8185865b90004686469676573744944016672616e646f6d5820ffc1e79ded79ab4e7177ad1bb9a36a03c7fa06ff6712f84983ea2a480c6e9dcd71656c656d656e744964656e7469666965726a676976656e5f6e616d656c656c656d656e7456616c7565644a6f686ed818586eb90004686469676573744944026672616e646f6d58206ebfccf01090bfdcd92e1672b03674cb6be6220a6eccd25ef54da1a38cce889d71656c656d656e744964656e7469666965726a62697274685f646174656c656c656d656e7456616c7565d903ec6a313938302d30362d3135d8185868b90004686469676573744944056672616e646f6d5820cbb76c15934ce806e5e0e3e97ac02fe667e2c38b2fe2dd1ee72fa3b6b82330a371656c656d656e744964656e7469666965726f69737375696e675f636f756e7472796c656c656d656e7456616c7565625553d818586eb90004686469676573744944066672616e646f6d582006526eed9658b3370029f25d2ac351bb0bb319dbc59175e39d70c749e7c5554571656c656d656e744964656e7469666965727169737375696e675f617574686f726974796c656c656d656e7456616c7565664e5920444d56d8185873b90004686469676573744944076672616e646f6d582077d347c7189327465e204881f09e3c93925207dd489bf3aefd24b2d1ca4bcbf571656c656d656e744964656e7469666965727469737375696e675f6a7572697364696374696f6e6c656c656d656e7456616c7565684e657720596f726b6a697373756572417574688443a10126a20442313118218159022e3082022a308201d0a003020102021457c6ccd308bde43eca3744f2a87138dabbb884e8300a06082a8648ce3d0403023053310b30090603550406130255533111300f06035504080c084e657720596f726b310f300d06035504070c06416c62616e79310f300d060355040a0c064e5920444d56310f300d060355040b0c064e5920444d56301e170d3233303931343134353531385a170d3333303931313134353531385a3053310b30090603550406130255533111300f06035504080c084e657720596f726b310f300d06035504070c06416c62616e79310f300d060355040a0c064e5920444d56310f300d060355040b0c064e5920444d563059301306072a8648ce3d020106082a8648ce3d03010703420004893c2d8347906dc6cd69b7f636af4bfd533f96184f0aadacd10830da4471dbdb60ac170d1cfc534fae2d9dcd488f7747fdf978d925ea31e9e9083c382ba9ed53a38181307f301d0603551d0e04160414ab6d2e03b91d492240338fbccadefd9333eaf6c7301f0603551d23041830168014ab6d2e03b91d492240338fbccadefd9333eaf6c7300f0603551d130101ff040530030101ff302c06096086480186f842010d041f161d4f70656e53534c2047656e657261746564204365727469666963617465300a06082a8648ce3d0403020348003045022009fd0cab97b03e78f64e74d7dcee88668c476a0afc5aa2cebffe07d3be772ea9022100da38abc98a080f49f24ffece1fffc8a6cdd5b2c0b5da8fc7b767ac3a95dcb83e590319d818590314b900066776657273696f6e63312e306f646967657374416c676f726974686d675348412d3235366c76616c756544696765737473b900026f6f72672e637573746f6d2e74657374a1005820bd2e1b33ea858db0bc0fbe4c8cff148c8211b86df3b55d1fee58185814ad1371716f72672e69736f2e31383031332e352e31ac0058201971387dfe0579d9b0a1f58e2b2ee93b4c4b34e9ffdb5905578549b4bce4eb460158208ab9ce6a56e6acc82984084582a2ab667d154674e57c7ebc43c20646a46e69bc025820985a716c25e38a74a52029a58e3f2cef4600c1c07cd38fab92496b83e4a76129035820bf1823e37be6515d48580c122a5043ffc12a16b005053a02fe086bd9f15d702f045820bf7c12c90090e6fe05dcbe1e64302b59efccb3cecc14fcab6bec95c6a1ed93970558200e52a0a170b4b1df1d100da11718dbcaaa85500b79acd95438617c1995823808065820dc81718e8f69e3b6b1969481f70e942d2639324608d7e76c50bada7e78e689f6075820f252f83326f7e2215e1c8f36b188e47ae4cf40e08b8522b6d6bde6adee31ef1708582026367a8b317a8d978b23260d73e9c7b6764a36a3c5ef361bd2170304ae1fd0130958203fb29ca0c0cc1e9bd6495304db56f96f3787c5e98eebc95eba6b52ac557043430a582069631ea6e2dbc8e0cb34dd336e51843a9a8ba8ffbee77269400b9591d251c9a90b5820c5cdcfaeab3c65a1d17ecd6ef4aaf283ec90271ed5407d2b887091306cc2e3286d6465766963654b6579496e666fb90001696465766963654b6579a40102215820881879ca7a238b19bf0f4c1f8c00e9a2e19ba7a6f73eae92b851d4de1b508559225820a314b538039127b5cd50735f54519e33c134450545c5603ad9f263facc56d377200167646f6354797065756f72672e69736f2e31383031332e352e312e6d444c6c76616c6964697479496e666fb90003667369676e6564c074323032332d30392d32375431343a35323a34345a6976616c696446726f6dc074323032332d30392d32375431343a35323a34345a6a76616c6964556e74696cc074323037332d30392d32375431343a35323a34345a5840fd74e79a17f26ab262bd8810c9dd418a12506326d0ffbb80271a323ebde45135ce214f2ce9aa9d663dc73cb55c8608fc0ab316bbad372b72ac346f89d6f0a23b6c6465766963655369676e6564b900026a6e616d65537061636573d81843b900006a64657669636541757468b900016f6465766963655369676e61747572658443a10126a10442313158d4d81858d0847444657669636541757468656e7469636174696f6e83f6f68466313233343536782b437131616e506238765a55356a354330643768637362754a4c4270496177554a4944515269324562776234785c687474703a2f2f6c6f63616c686f73743a343030302f6170692f70726573656e746174696f6e5f726571756573742f64633839393964662d643665612d346338342d393938352d3337613862383161383265632f63616c6c6261636b6761626364656667756f72672e69736f2e31383031332e352e312e6d444cd81843b9000058408521237ed119f5e0c2a0182604b8eb4c00fc8d687481a73ba0bbaf5d5396fc5073fbbaa3d9c960b1631632bda68af79604df78ad904653593e903d531dc2efd76673746174757300`;
  const verifier = new DeviceResponseVerifier([ISSUER_CERTIFICATE]);

  it('should verify properly', async () => {
    await expect(verifier.verify(deviceResponse, {
      ephemeralReaderKey,
      encodedSessionTranscript,
    })).rejects.toThrow('Issuer Auth must include a valid digest for org.iso.18013.5.1/family_name element');
  });

  it('should return the decoded response when skipping the error', async () => {
    const { documents } = await verifier.verify(deviceResponse, {
      ephemeralReaderKey,
      encodedSessionTranscript,
      onCheck: (v, cb) => {
        if (v.category === 'DATA_INTEGRITY') { return; }
        cb(v);
      },
    });
    expect(await documents[0]
      .issuerSigned
      .nameSpaces['org.iso.18013.5.1']
      .find((f) => f.elementIdentifier === 'family_name')?.isValid())
      .toBe(false);
  });

  it('should return the invalid attribute in the diagnostic info', async () => {
    const di = await verifier.getDiagnosticInformation(deviceResponse, {
      ephemeralReaderKey,
      encodedSessionTranscript,
    });
    expect(di.attributes.find((a) => a.id === 'family_name')?.isValid).toBe(false);
  });

  // it('should be able to verify without ephemeralReaderKey and encodedSessionTrasncript', async () => {
  //   await verifier.verify(deviceResponse, {
  //     onCheck: (verification, original) => {
  //       if (verification.category === 'DEVICE_AUTH') {
  //         return;
  //       }
  //       original(verification);
  //     },
  //   });
  // });

  // it('should contain only the disclosed fields', async () => {
  //   const { documents } = await verifier.verify(deviceResponse, {
  //     ephemeralReaderKey,
  //     encodedSessionTranscript,
  //   });

  //   const numberOfAttributes = documents[0]
  //     .issuerSigned
  //     .nameSpaces['org.iso.18013.5.1']
  //     .length;

  //   expect(numberOfAttributes).toBe(6);
  // });

  // it('should validate the digest of all fields', async () => {
  //   const { documents } = await verifier.verify(deviceResponse, {
  //     ephemeralReaderKey,
  //     encodedSessionTranscript,
  //   });

  //   const allFieldsAreValid = (await Promise.all(documents[0]
  //     .issuerSigned
  //     .nameSpaces['org.iso.18013.5.1']
  //     .map((field) => field.isValid()))).every(Boolean);

  //   expect(allFieldsAreValid).toBe(true);
  // });
});
