import crypto from 'crypto';
import { parseDeviceResponse } from '../src';
import { DeviceResponse } from '../src/deviceResponse/types';
import { cborEncode } from '../src/cose/cbor';

describe.skip('parser', () => {
  describe('parseDeviceResponse', () => {
    let parsed: DeviceResponse;

    // This is a random generated test public key
    const publicKey: crypto.webcrypto.JsonWebKey = {
      alg: 'ES256',
      kty: 'EC',
      crv: 'P-256',
      x: 'yYU7Zcy3Lljt-HQxB4ETw5k3p_ZlHTfakLS82BSIPHM',
      y: 'IVcES_NgNlj5Z12VhhIdf0-7wcRvo9QD2tamWwYqDbs',
    };

    // this is a Mobile Driver License randomly generated for the purpose of this test
    // signed with the randomly generated private key.
    const encodedDeviceResponse = Buffer.from('a36776657273696f6e63312e3069646f63756d656e747381a267646f6354797065781865752e6575726f70612e65632e65756469772e7069642e316c6973737565725369676e6564a26a6e616d65537061636573a2781865752e6575726f70612e65632e65756469772e7069642e3185d818586ea100a4686469676573744944006672616e646f6d5820c19dc0fcab2c07b1b495226d2ead2e239aeca8739c0a6c5473dd573b4519556171656c656d656e744964656e7469666965726a62697274685f646174656c656c656d656e7456616c7565d903ec6a313932322d30332d3133d8185869a101a4686469676573744944016672616e646f6d5820b3317a15c0f7c46b42e5121bc49439afe6f2a24a57dad7e282f926a51fe2eee171656c656d656e744964656e7469666965726a676976656e5f6e616d656c656c656d656e7456616c7565684d61736365747469d8185866a102a4686469676573744944026672616e646f6d5820ec8cb12b93421eb9d150a9238797d65dd0b2fdd4d09d0e68f04a2e6d20ec154471656c656d656e744964656e7469666965726b62697274685f706c6163656c656c656d656e7456616c756564526f6d65d8185866a103a4686469676573744944036672616e646f6d582073df3400343575f820634481a00d9d0ebdb0a48c8b62b9778aff8b6b88f73dd571656c656d656e744964656e7469666965726d62697274685f636f756e7472796c656c656d656e7456616c7565624954d818586ba104a4686469676573744944046672616e646f6d5820ed88861ddd811f8f110b23b9484f6a65e90fbfd119c4fab44d18eedeb828805871656c656d656e744964656e7469666965726b66616d696c795f6e616d656c656c656d656e7456616c7565695261666661656c6c6f781b65752e6575726f70612e65632e65756469772e7069642e69742e3181d8185877a105a4686469676573744944056672616e646f6d582044d09c6dd21436d512e7e8667aeed30484f3d33cdf414bbef78ebdbd9c256d5c71656c656d656e744964656e7469666965726b7461785f69645f636f64656c656c656d656e7456616c75657554494e49542d5858585858585858585858585858586a6973737565724175746884590220a30126044864656d6f2d6b6964182159020e3082020a308201afa003020102021460fa33acbbdfecfcc170f9bf272a87acdd9cdc72300a06082a8648ce3d0403023064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d301e170d3233303832343133303835345a170d3233303930333133303835345a3064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d3059301306072a8648ce3d020106082a8648ce3d03010703420004c9853b65ccb72e58edf87431078113c39937a7f6651d37da90b4bcd814883c732157044bf3603658f9675d9586121d7f4fbbc1c46fa3d403dad6a65b062a0dbba33f303d303b0603551d1104343032863068747470733a2f2f63726564656e7469616c2d6973737565722e6f6964632d66656465726174696f6e2e6f6e6c696e65300a06082a8648ce3d0403020349003046022100a6d2e28b727d99c4f769be5307096332a67af60bb7093e39d5e1170d144cdd77022100a3a33cd1361ac613fd859df5c83deb8c54c2b123ad15836ea6c7e3ba50781cbca1182159020d30820209308201afa003020102021415439411b61009c722df9e064b4e60bd9cf77080300a06082a8648ce3d0403023064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d301e170d3233303832343133303835345a170d3233303930333133303835345a3064310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d53616e204672616e636973636f31133011060355040a0c0a4d7920436f6d70616e793113301106035504030c0a6d79736974652e636f6d3059301306072a8648ce3d020106082a8648ce3d03010703420004c9853b65ccb72e58edf87431078113c39937a7f6651d37da90b4bcd814883c732157044bf3603658f9675d9586121d7f4fbbc1c46fa3d403dad6a65b062a0dbba33f303d303b0603551d1104343032863068747470733a2f2f63726564656e7469616c2d6973737565722e6f6964632d66656465726174696f6e2e6f6e6c696e65300a06082a8648ce3d0403020348003045022041d795fbc2e8a9eb8c0664fc5ac1c03725d4209bef061597fa5d70b0da403aeb022100d6231dcbab88d999d4facd1f8cdbb31e7e69dea599c93aaeedb60f14e152d2c05901e8a66776657273696f6e63312e306f646967657374416c676f726974686d667368613235366c76616c756544696765737473a2781865752e6575726f70612e65632e65756469772e7069642e31a5005820b477955e98c0882fbee3fe30ff8dc51128b6bedfe266b10ade08e4f9b1c31a3901582097273be5fbaa1a22b180977bcd3ab2c1aed2445dc8c9edb91cf557cd7e213f1502582068a06a74df189765c42e8389352c395ea12e3915747206e7b6afaf8125a0043103582039a2500f1f5e39972985929ed17cc1196d35894ad93200ef137047285809cf130458205e4febfd9c7d6c35916c6548d381c0ee37abfda5128e3e08c21467379b6d8b44781b65752e6575726f70612e65632e65756469772e7069642e69742e31a10558207096f4311954c83ca4d631734344feb0130df3ac2546c70891bbef97d4e38c6e6d6465766963654b6579496e666fa1696465766963654b6579f667646f6354797065781865752e6575726f70612e65632e65756469772e7069642e316c76616c6964697479496e666fa3667369676e656456c074323032332d30382d32345431333a30383a35345a6976616c696446726f6d56c074323032332d30382d32345431333a30383a35345a6a76616c6964556e74696c56c074323032382d30382d32325431333a30383a35345a58405ae50dfd3378157209d407a71a5969ec98935e21dbaf2f6f00eee93266eccff01e4eada1119b1e425b8cf5a4d60bdd168e44235dd813e3a078b565d87a4f7cff6673746174757300', 'hex');

    beforeAll(async () => {
      parsed = await parseDeviceResponse(encodedDeviceResponse);
    });

    it('should match the snapshot', () => {
      expect(parsed).toMatchSnapshot();
    });

    it('should parse issuerSigned.issuerAuth[1] as map', () => {
      expect(parsed.documents[0].issuerSigned.issuerAuth.unprotectedHeaders).toBeInstanceOf(Map);
    });

    it('should contain the first name', () => {
      const givenName = parsed.documents[0]
        .issuerSigned
        .nameSpaces['eu.europa.ec.eudiw.pid.1']
        .find((e) => e.elementIdentifier === 'given_name')?.elementValue;
      // expect(parsed).toMatchSnapshot();
      expect(givenName).toBe('Mascetti');
    });

    it('should verify the issuerAuth', async () => {
      const r = await parsed.documents[0].issuerSigned.issuerAuth.verify(publicKey, { publicKeyFormat: 'jwk' });
      expect(r).toBeTruthy();
    });

    it('should decoded protected headers', () => {
      expect(parsed.documents[0].issuerSigned.issuerAuth.decodedProtectedHeaders)
        .toMatchSnapshot();
    });

    it('should contain the raw decode', () => {
      expect(parsed).toHaveProperty('raw');
      expect(cborEncode(parsed.raw).toString('hex'))
        .toBe(encodedDeviceResponse.toString('hex'));
    });
  });
});
